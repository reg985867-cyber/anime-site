const mongoose = require('mongoose');
const Achievement = require('../models/Achievement');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/anime-site');
    console.log('‚úÖ MongoDB Connected');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    process.exit(1);
  }
};

// –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
const achievements = [
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  {
    name: 'first_episode',
    title: 'üé¨ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —ç–ø–∏–∑–æ–¥',
    icon: 'üé¨',
    category: 'watching',
    rarity: 'common',
    criteria: {
      type: 'count',
      target: 1,
      field: 'totalEpisodes'
    },
    rewards: {
      points: 10,
      badge: '–ù–æ–≤–∏—á–æ–∫'
    }
  },
  {
    name: 'marathon_runner',
    title: 'üèÉ‚Äç‚ôÇÔ∏è –ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤ –ø–æ–¥—Ä—è–¥',
    icon: 'üèÉ‚Äç‚ôÇÔ∏è',
    category: 'watching',
    rarity: 'rare',
    criteria: {
      type: 'streak',
      target: 10,
      field: 'watchingStreak'
    },
    rewards: {
      points: 50,
      badge: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
      title: '–õ—é–±–∏—Ç–µ–ª—å –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤'
    }
  },
  {
    name: 'hundred_episodes',
    title: 'üíØ –°–æ—Ç–Ω–∏–∫',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 100 —ç–ø–∏–∑–æ–¥–æ–≤',
    icon: 'üíØ',
    category: 'watching',
    rarity: 'epic',
    criteria: {
      type: 'count',
      target: 100,
      field: 'totalEpisodes'
    },
    rewards: {
      points: 100,
      badge: '–°–æ—Ç–Ω–∏–∫'
    }
  },
  {
    name: 'anime_addict',
    title: 'üî• –ê–Ω–∏–º–µ-–∑–∞–≤–∏—Å–∏–º—ã–π',
    description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ 1000 –º–∏–Ω—É—Ç –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º',
    icon: 'üî•',
    category: 'watching',
    rarity: 'epic',
    criteria: {
      type: 'time',
      target: 1000,
      field: 'totalMinutes'
    },
    rewards: {
      points: 150,
      badge: '–ó–∞–≤–∏—Å–∏–º—ã–π',
      title: '–ò—Å—Ç–∏–Ω–Ω—ã–π —Ñ–∞–Ω–∞—Ç –∞–Ω–∏–º–µ'
    }
  },
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞
  {
    name: 'first_rating',
    title: '‚≠ê –ü–µ—Ä–≤–∞—è –æ—Ü–µ–Ω–∫–∞',
    description: '–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –æ—Ü–µ–Ω–∫—É –∞–Ω–∏–º–µ',
    icon: '‚≠ê',
    category: 'social',
    rarity: 'common',
    criteria: {
      type: 'count',
      target: 1,
      field: 'totalRatings'
    },
    rewards: {
      points: 10,
      badge: '–ö—Ä–∏—Ç–∏–∫-–Ω–æ–≤–∏—á–æ–∫'
    }
  },
  {
    name: 'critic',
    title: 'üìù –ö—Ä–∏—Ç–∏–∫',
    description: '–û—Ü–µ–Ω–∏—Ç–µ –±–æ–ª–µ–µ 20 –∞–Ω–∏–º–µ',
    icon: 'üìù',
    category: 'social',
    rarity: 'rare',
    criteria: {
      type: 'count',
      target: 20,
      field: 'totalRatings'
    },
    rewards: {
      points: 75,
      badge: '–ö—Ä–∏—Ç–∏–∫',
      title: '–ó–Ω–∞—Ç–æ–∫ –∞–Ω–∏–º–µ'
    }
  },
  {
    name: 'harsh_critic',
    title: 'üéØ –ü—Ä–∏–¥–∏—Ä—á–∏–≤—ã–π –∫—Ä–∏—Ç–∏–∫',
    description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ 6.0',
    icon: 'üéØ',
    category: 'social',
    rarity: 'epic',
    criteria: {
      type: 'rating',
      target: 6.0,
      field: 'averageRating'
    },
    rewards: {
      points: 100,
      badge: '–ü—Ä–∏–¥–∏—Ä—á–∏–≤—ã–π',
      title: '–°—Ç—Ä–æ–≥–∏–π —Å—É–¥—å—è'
    }
  },
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
  {
    name: 'genre_explorer',
    title: 'üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –∏–∑ 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤',
    icon: 'üó∫Ô∏è',
    category: 'exploration',
    rarity: 'rare',
    criteria: {
      type: 'diversity',
      target: 5,
      field: 'uniqueGenres'
    },
    rewards: {
      points: 60,
      badge: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      title: '–õ—é–±–∏—Ç–µ–ª—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è'
    }
  },
  {
    name: 'genre_master',
    title: 'üèÜ –ú–∞—Å—Ç–µ—Ä –∂–∞–Ω—Ä–æ–≤',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –∏–∑ 15 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤',
    icon: 'üèÜ',
    category: 'exploration',
    rarity: 'legendary',
    criteria: {
      type: 'diversity',
      target: 15,
      field: 'uniqueGenres'
    },
    rewards: {
      points: 200,
      badge: '–ú–∞—Å—Ç–µ—Ä –∂–∞–Ω—Ä–æ–≤',
      title: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑—Ä–∏—Ç–µ–ª—å'
    }
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    name: 'night_owl',
    title: 'ü¶â –°–æ–≤–∞',
    description: '–°–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'ü¶â',
    category: 'time',
    rarity: 'rare',
    criteria: {
      type: 'custom',
      customCheck: `
        const WatchHistory = require('../models/WatchHistory');
        const nightWatches = await WatchHistory.find({
          userId: userId,
          createdAt: {
            $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          }
        });
        
        const nightSessions = nightWatches.filter(watch => {
          const hour = new Date(watch.createdAt).getHours();
          return hour >= 0 && hour <= 6;
        });
        
        const uniqueDays = new Set();
        nightSessions.forEach(session => {
          const day = new Date(session.createdAt).toDateString();
          uniqueDays.add(day);
        });
        
        return uniqueDays.size >= 7;
      `
    },
    rewards: {
      points: 80,
      badge: '–°–æ–≤–∞',
      title: '–ù–æ—á–Ω–æ–π –∑—Ä–∏—Ç–µ–ª—å'
    }
  },
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    name: 'first_friend',
    title: 'ü§ù –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥',
    description: '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞',
    icon: 'ü§ù',
    category: 'social',
    rarity: 'common',
    criteria: {
      type: 'count',
      target: 1,
      field: 'totalFriends'
    },
    rewards: {
      points: 20,
      badge: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π'
    }
  },
  {
    name: 'social_butterfly',
    title: 'ü¶ã –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–°–æ–±–µ—Ä–∏—Ç–µ 25 –¥—Ä—É–∑–µ–π',
    icon: 'ü¶ã',
    category: 'social',
    rarity: 'epic',
    criteria: {
      type: 'count',
      target: 25,
      field: 'totalFriends'
    },
    rewards: {
      points: 120,
      badge: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π',
      title: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏'
    }
  },
  {
    name: 'commenter',
    title: 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä',
    description: '–û—Å—Ç–∞–≤—å—Ç–µ 50 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
    icon: 'üí¨',
    category: 'social',
    rarity: 'rare',
    criteria: {
      type: 'count',
      target: 50,
      field: 'totalComments'
    },
    rewards: {
      points: 70,
      badge: '–ë–æ–ª—Ç—É–Ω'
    }
  },
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    name: 'early_bird',
    title: 'üê¶ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞',
    icon: 'üê¶',
    category: 'special',
    rarity: 'legendary',
    criteria: {
      type: 'custom',
      customCheck: `
        const WatchList = require('../models/WatchList');
        const recentWatches = await WatchList.find({
          userId: userId,
          status: 'watching'
        }).populate('animeId');
        
        return recentWatches.some(watch => {
          if (!watch.animeId.airingStartDate) return false;
          const weekAfterRelease = new Date(watch.animeId.airingStartDate);
          weekAfterRelease.setDate(weekAfterRelease.getDate() + 7);
          return watch.createdAt <= weekAfterRelease;
        });
      `
    },
    rewards: {
      points: 250,
      badge: '–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü',
      title: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –Ω–æ–≤–∏–Ω–∫–∞–º–∏'
    },
    isSecret: true
  },
  {
    name: 'perfectionist',
    title: 'üíé –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
    description: '–î–æ—Å–º–æ—Ç—Ä–∏—Ç–µ 10 –∞–Ω–∏–º–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥—Ä—è–¥',
    icon: 'üíé',
    category: 'watching',
    rarity: 'mythic',
    criteria: {
      type: 'custom',
      customCheck: `
        const WatchList = require('../models/WatchList');
        const completedAnime = await WatchList.find({
          userId: userId,
          status: 'completed'
        }).sort({ updatedAt: -1 }).limit(10);
        
        return completedAnime.length >= 10;
      `
    },
    rewards: {
      points: 300,
      badge: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
      title: '–ú–∞—Å—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'
    },
    isSecret: true
  },
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  {
    name: 'loyal_user',
    title: 'üèÖ –í–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    description: '–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üèÖ',
    category: 'special',
    rarity: 'epic',
    criteria: {
      type: 'custom',
      customCheck: `
        const User = require('../models/User');
        const user = await User.findById(userId);
        const daysSinceRegistration = Math.floor(
          (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24)
        );
        return daysSinceRegistration >= 30;
      `
    },
    rewards: {
      points: 150,
      badge: '–í–µ—Ä–Ω—ã–π',
      title: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑—Ä–∏—Ç–µ–ª—å'
    }
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const seedAchievements = async () => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await Achievement.deleteMany({});
    console.log('üóëÔ∏è  –°—Ç–∞—Ä—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const createdAchievements = await Achievement.insertMany(achievements);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const stats = await Achievement.aggregate([
      { $group: { _id: '$category', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    stats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    });
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    const rarityStats = await Achievement.aggregate([
      { $group: { _id: '$rarity', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    
    console.log('\n‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:');
    rarityStats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    });
    
    console.log('\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const runSeed = async () => {
  await connectDB();
  await seedAchievements();
  await mongoose.disconnect();
  console.log('üëã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  process.exit(0);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runSeed().catch(console.error);
}

module.exports = { seedAchievements };